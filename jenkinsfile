def remote = [:]
remote.host = '192.168.160.87'
remote.name = 'playground'

pipeline {
    agent any

    tools {
        maven 'maven36'
    }

    stages {
        /* stage('Test Stage') {
            steps {
                parallel(
                    kafkaConsumer: {
                        dir('kafkaConsumer') {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                sh "chmod +x -R ${env.WORKSPACE}"
                                sh 'echo "Tests on kafkaConsumer"'
                                sh './mvnw test'
                            }
                        }
                    },
                    projectbackend: {
                        dir('projectbackend') {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                sh "chmod +x -R ${env.WORKSPACE}"
                                sh 'echo "Tests on projectbackend"'
                                sh 'echo "Error due to not having a database"'
                                sh './mvnw test'
                            }
                        }
                    }
                )
            }
        } */
        stage('Compilation kafkaConsumer') {
            steps {
                dir('kafkaConsumer') {
                        sh "chmod +x -R ${env.WORKSPACE}"
                        sh 'echo "Clean install on kafkaConsumer"'
                        sh './mvnw clean install -DskipTests'
                }
            }
        }
        stage('Compilation projectbackend') {
            steps {
                dir('projectbackend') {
                    sh "chmod +x -R ${env.WORKSPACE}"
                    sh 'echo "Clean install on projectbackend"'
                    sh './mvnw clean install -DskipTests'
                }
            }
        }
        stage('Create Docker Image') {
            steps {
                parallel(
                    kafkaConsumer: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh "chmod +x -R ${env.WORKSPACE}"
                            sh 'echo "Creating Docker Image on kafkaConsumer"'
                            script {
                                docker.withRegistry("http://192.168.160.48:5000") {
                                    def dockerImage = docker.build("godogo/kafkaconsumer", "kafkaConsumer")

                                    dockerImage.push()
                                }
                            }
                        }
                    },
                    projectbackend: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh "chmod +x -R ${env.WORKSPACE}"
                            sh 'echo "Creating Docker Image on projectbackend"'
                            script {
                                docker.withRegistry("http://192.168.160.48:5000") {
                                    def dockerImage2 = docker.build("godogo/projectbackend", "projectbackend")

                                    dockerImage2.push()
                                }
                            }
                        }
                    }
                )
            }
        }
/*         stage('Pushing Docker Image') {
            steps {
                parallel(
                    kafkaConsumer: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh "chmod +x -R ${env.WORKSPACE}"
                            sh 'echo "Pushing Docker Image on kafkaConsumer"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage.push("$BUILD_NUMBER")
                                    dockerImage.push('latest')
                                }
                            }
                        }
                    },
                    projectbackend: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh "chmod +x -R ${env.WORKSPACE}"
                            sh 'echo "Pushing Docker Image on projectbackend"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage2.push("$BUILD_NUMBER")
                                    dockerImage2.push('latest')
                                }
                            }
                        }
                    }
                )
            }
        } */
        stage('Deploying') {
            steps {
                sh "chmod +x -R ${env.WORKSPACE}"
                sh 'echo "Deploying"'
                withCredentials([usernamePassword(credentialsId: 'esp52_ssh', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    
                    echo "$remote.host"

                    script {
                        remote.user = USERNAME
                        remote.password = PASSWORD
                        remote.allowAnyHosts = true

                    }

                    echo "$remote.user"

                    sshCommand remote: remote, command: 'docker stop godogo/kafkaconsumer:latest'
                    sshCommand remote: remote, command: 'docker rm godogo/kafkaconsumer:latest'
                    sshCommand remote: remote, command: 'docker rmi 192.168.160.48:5000/godogo/kafkaconsumer'

                    //sshCommand remote: remote, command: "/bin/bash -c 'docker-compose down --rmi all || true'"
                    //sshCommand remote: remote, command: "/bin/bash -c 'rm docker-compose.yml || true'"
                    //sshPut remote: remote, from: 'docker-compose.yml', into: './', override: true
                    //sshCommand remote: remote, command: "/bin/bash -c 'docker-compose up -d'"
                    //sh 'ssh -o StrictHostKeyChecking=no -l Deploying 192.168.160.87 -a "docker stop godogo/kafkaconsumer && docker rm godogo/kafkaconsumer && docker rmi 192.168.160.87:5000/godogo/kafkaconsumer && docker pull 192.168.160.87:5000/godogo/kafkaconsumer && docker create -p 50008:8080 --name godogo/kafkaconsumer 192.168.160.87:5000/godogo/kafkaconsumer && docker start godogo/kafkaconsumer"'
                }
            }
        }
    }
}
