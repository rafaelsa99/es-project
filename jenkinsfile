def remote = [:]
remote.host = '192.168.160.87'
remote.name = 'playground'

pipeline {
    agent any

    tools {
        maven 'maven36'
        jdk 'jdk11'
    }

    environment {
        dockerImage = ''
        dockerImage2 = ''
    }

    stages {
        stage('Cloning repository') {
            steps {
                sh "chmod +x -R ${env.WORKSPACE}"
                git(
                    branch: 'main',
                    url: 'https://github.com/rafaelsa99/es-project'

                )
            }
        }

        /* stage('Test Stage') {
            steps {
                parallel(
                    kafkaConsumer: {
                        dir('kafkaConsumer') {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                sh "chmod +x -R ${env.WORKSPACE}"
                                sh 'echo "Tests on kafkaConsumer"'
                                sh './mvnw test'
                            }
                        }
                    },
                    projectbackend: {
                        dir('projectbackend') {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                sh "chmod +x -R ${env.WORKSPACE}"
                                sh 'echo "Tests on projectbackend"'
                                sh 'echo "Error due to not having a database"'
                                sh './mvnw test'
                            }
                        }
                    }
                )
            }
        } */
        stage('Compilation kafkaConsumer') {
            steps {
                parallel(
                    kafkaConsumer: {
                        dir('kafkaConsumer') {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                sh "chmod +x -R ${env.WORKSPACE}"
                                sh 'echo "Clean install on kafkaConsumer"'
                                sh './mvnw clean install -DskipTests'
                            }
                        }
                    },
                    projectbackend: {
                        dir('projectbackend') {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                sh "chmod +x -R ${env.WORKSPACE}"
                                sh 'echo "Clean install on projectbackend"'
                                sh './mvnw clean install -DskipTests'
                            }
                        }
                    }
                )
            }
        }
        /*stage('Deploy kafkaConsumer') {
            steps {
                dir('kafkaConsumer') {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        echo 'Deploying Artifact'
                        sh './mvnw deploy -f pom.xml -s settings.xml'
                    }
                }
            }
        }*/
        stage('Create Docker Image') {
            steps {
                parallel(
                    kafkaConsumer: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh "chmod +x -R ${env.WORKSPACE}"
                            sh 'echo "Creating Docker Image on kafkaConsumer"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage = docker.build('es-project/kafkaconsumer5', 'kafkaConsumer')
                                }
                            }
                        }
                    },
                    projectbackend: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh "chmod +x -R ${env.WORKSPACE}"
                            sh 'echo "Creating Docker Image on projectbackend"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage2 = docker.build('es-project/projectbackend5', 'projectbackend')
                                }
                            }
                        }
                    }
                )
            }
        }
        stage('Pushing Docker Image') {
            steps {
                parallel(
                    kafkaConsumer: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh "chmod +x -R ${env.WORKSPACE}"
                            sh 'echo "Pushing Docker Image on kafkaConsumer"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    //dockerImage.push("$BUILD_NUMBER")
                                    dockerImage.push()
                                }
                            }
                        }
                    },
                    projectbackend: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh "chmod +x -R ${env.WORKSPACE}"
                            sh 'echo "Pushing Docker Image on projectbackend"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    //dockerImage2.push("$BUILD_NUMBER")
                                    dockerImage2.push()
                                }
                            }
                        }
                    }
                )
            }
        }
        stage('Deploying') {
            steps {
                sh "chmod +x -R ${env.WORKSPACE}"
                sh 'echo "Deploying"'
                withCredentials([usernamePassword(credentialsId: 'esp52_ssh', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    echo "$remote.host"

                    script {
                        remote.user = USERNAME
                        remote.password = PASSWORD
                        remote.allowAnyHosts = true
                    }

                    echo "$remote.user"

                    sshCommand remote: remote, command: 'docker stop esp52_kafkaconsumer5 || echo "Do not have that image"'
                    sshCommand remote: remote, command: 'docker rm esp52_kafkaconsumer5 || echo "Do not have that image"'
                    sshCommand remote: remote, command: 'docker rmi 192.168.160.48:5000/es-project/kafkaconsumer5 || echo "Do not have that image"'
                    sshCommand remote: remote, command: 'docker pull 192.168.160.48:5000/es-project/kafkaconsumer5'
                    sshCommand remote: remote, command: 'docker create -p 52025:52025 --name esp52_kafkaconsumer5 192.168.160.48:5000/es-project/kafkaconsumer5'
                    sshCommand remote: remote, command: 'docker start esp52_kafkaconsumer5'

                    sshCommand remote: remote, command: "docker stop esp52_projectbackend5 || echo 'Do not have that image'"
                    sshCommand remote: remote, command: "docker rm esp52_projectbackend5 || echo 'Do not have that image'"
                    sshCommand remote: remote, command: 'docker rmi 192.168.160.48:5000/es-project/projectbackend5'
                    sshCommand remote: remote, command: 'docker pull 192.168.160.48:5000/es-project/projectbackend5'
                    sshCommand remote: remote, command: 'docker create -p 52026:52026 --name esp52_projectbackend5 192.168.160.48:5000/es-project/projectbackend5'
                    sshCommand remote: remote, command: 'docker start esp52_projectbackend5'

                    /*sshCommand remote: remote, command: "/bin/bash -c 'docker-compose down --rmi all || true'"
                    sshCommand remote: remote, command: "/bin/bash -c 'rm docker-compose.yml || true'"
                    sshPut remote: remote, from: 'docker-compose.yml', into: './', override: true
                    sshCommand remote: remote, command: "/bin/bash -c 'docker-compose up -d'"*/

                    //sshCommand remote: remote, command: 'docker-compose up -d'
                }
            }
        }
    }
    /*post {
        always {
            echo "Pipeline execution ended: "
        }
        success {
            echo "Success"
        }
        failure {
            echo "Failed"
            }
        }
    }*/
}
