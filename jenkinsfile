def remote = [:]
remote.host = '192.168.160.87'
remote.name = 'playground'

pipeline {
    agent any

    tools {
        maven 'maven36'
        jdk 'jdk11'
    }

    environment {
        //dockerImage = ''
        //dockerImage2 = ''
        dockerImage3 = ''
        dockerImage4 = ''
        dockerImage5 = ''
        dockerImage6 = ''
        dockerImage7 = ''
        dockerImage8 = ''
    }

    stages {
        stage('Cloning repository') {
            steps {
                sh "chmod +x -R ${env.WORKSPACE}"
                git(
                    branch: 'main',
                    url: 'https://github.com/rafaelsa99/es-project'

                )
            }
        }

        stage('Testins Cucumber / MockMVC on Parking Lots Service') {
            steps {
                dir('ParkingLotsService') {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        sh "chmod +x -R ${env.WORKSPACE}"
                        sh 'echo "Tests on ParkingLotsService"'
                        sh './mvnw test'
                    }
                }
            }
        }
        stage('Compilation') {
            steps {
                parallel(
                    /*           
                    kafkaConsumer: {
                        dir('kafkaConsumer') {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                sh "chmod +x -R ${env.WORKSPACE}"
                                sh 'echo "Clean install on kafkaConsumer"'
                                sh './mvnw clean install -DskipTests'
                            }
                        }
                    },
                    projectbackend: {
                        dir('projectbackend') {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                sh "chmod +x -R ${env.WORKSPACE}"
                                sh 'echo "Clean install on projectbackend"'
                                sh './mvnw clean install -DskipTests'
                            }
                        }
                    },
                    */
                    alarmsService: {
                        dir('AlarmsService') {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                sh "chmod +x -R ${env.WORKSPACE}"
                                sh 'echo "Clean install on AlarmsService"'
                                sh './mvnw clean install -DskipTests'
                            }
                        }
                    },
                    externalAPI: {
                        dir('externalAPI') {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                sh "chmod +x -R ${env.WORKSPACE}"
                                sh 'echo "Clean install on externalAPI"'
                                sh './mvnw clean install -DskipTests'
                            }
                        }
                    },
                    managementService: {
                        dir('ManagementService') {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                sh "chmod +x -R ${env.WORKSPACE}"
                                sh 'echo "Clean install on ManagementService"'
                                sh './mvnw clean install -DskipTests'
                            }
                        }
                    },
                    parkingLotsService: {
                        dir('ParkingLotsService') {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                sh "chmod +x -R ${env.WORKSPACE}"
                                sh 'echo "Clean install on ParkingLotsService"'
                                sh './mvnw clean install -DskipTests'
                            }
                        }
                    },
                    staticInfo: {
                        dir('StaticInfo') {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                sh "chmod +x -R ${env.WORKSPACE}"
                                sh 'echo "Clean install on StaticInfo"'
                                sh './mvnw clean install -DskipTests'
                            }
                        }
                    },
                    vehiclesService: {
                        dir('VehiclesService') {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                sh "chmod +x -R ${env.WORKSPACE}"
                                sh 'echo "Clean install on VehiclesService"'
                                sh './mvnw clean install -DskipTests'
                            }
                        }
                    }
                )
            }
        }
        stage('Deploying Artifact') {
            steps {
                parallel(
                    kafkaConsumer: {
                        dir('kafkaConsumer') {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                echo 'Deploying Artifact'
                                sh './mvnw deploy -f pom.xml -s ../settings.xml'
                            }
                        }
                    },
                    projectbackend: {
                        dir('projectbackend') {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                echo 'Deploying Artifact'
                                sh './mvnw deploy -DskipTests -f pom.xml -s ../settings.xml'
                            }
                        }
                    }
                )
            }
        }
        stage('Create Docker Image') {
            steps {
                parallel(
                    /*
                    kafkaConsumer: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh "chmod +x -R ${env.WORKSPACE}"
                            sh 'echo "Creating Docker Image on kafkaConsumer"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage = docker.build('es-project/kafkaconsumer5', 'kafkaConsumer')
                                }
                            }
                        }
                    },
                    projectbackend: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh "chmod +x -R ${env.WORKSPACE}"
                            sh 'echo "Creating Docker Image on projectbackend"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage2 = docker.build('es-project/projectbackend5', 'projectbackend')
                                }
                            }
                        }
                    },
                    */
                    alarmsService: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh "chmod +x -R ${env.WORKSPACE}"
                            sh 'echo "Creating Docker Image on AlarmsService"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage3 = docker.build('es-project/alarmsservice5', 'AlarmsService')
                                }
                            }
                        }
                    },
                    externalAPI: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh "chmod +x -R ${env.WORKSPACE}"
                            sh 'echo "Creating Docker Image on externalAPI"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage4 = docker.build('es-project/externalapi5', 'externalAPI')
                                }
                            }
                        }
                    },
                    managementService: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh "chmod +x -R ${env.WORKSPACE}"
                            sh 'echo "Creating Docker Image on managementService"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage5 = docker.build('es-project/managementservice5', 'ManagementService')
                                }
                            }
                        }
                    },
                    parkingLotsService: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh "chmod +x -R ${env.WORKSPACE}"
                            sh 'echo "Creating Docker Image on ParkingLotsService"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage6 = docker.build('es-project/parkinglotsservice5', 'ParkingLotsService')
                                }
                            }
                        }
                    },
                    staticInfo: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh "chmod +x -R ${env.WORKSPACE}"
                            sh 'echo "Creating Docker Image on StaticInfo"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage7 = docker.build('es-project/staticinfo5', 'StaticInfo')
                                }
                            }
                        }
                    },
                    vehiclesService: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh "chmod +x -R ${env.WORKSPACE}"
                            sh 'echo "Creating Docker Image on VehiclesService"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage8 = docker.build('es-project/vehiclesservice5', 'VehiclesService')
                                }
                            }
                        }
                    }
                )
            }
        }
        stage('Pushing Docker Image') {
            steps {
                parallel(
                    /*
                    kafkaConsumer: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh "chmod +x -R ${env.WORKSPACE}"
                            sh 'echo "Pushing Docker Image on kafkaConsumer"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage.push()
                                }
                            }
                        }
                    },
                    projectbackend: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh "chmod +x -R ${env.WORKSPACE}"
                            sh 'echo "Pushing Docker Image on projectbackend"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage2.push()
                                }
                            }
                        }
                    },
                    */
                    alarmsService: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh "chmod +x -R ${env.WORKSPACE}"
                            sh 'echo "Pushing Docker Image on AlarmsService"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage3.push()
                                }
                            }
                        }
                    },
                    externalAPI: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh "chmod +x -R ${env.WORKSPACE}"
                            sh 'echo "Pushing Docker Image on externalAPI"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage4.push()
                                }
                            }
                        }
                    },
                    managementService: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh "chmod +x -R ${env.WORKSPACE}"
                            sh 'echo "Pushing Docker Image on managementService"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage5.push()
                                }
                            }
                        }
                    },
                    parkingLotsService: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh "chmod +x -R ${env.WORKSPACE}"
                            sh 'echo "Pushing Docker Image on ParkingLotsService"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage6.push()
                                }
                            }
                        }
                    },
                    staticInfo: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh "chmod +x -R ${env.WORKSPACE}"
                            sh 'echo "Pushing Docker Image on StaticInfo"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage7.push()
                                }
                            }
                        }
                    },
                    vehiclesService: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh "chmod +x -R ${env.WORKSPACE}"
                            sh 'echo "Pushing Docker Image on VehiclesService"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage8.push()
                                }
                            }
                        }
                    }
                )
            }
        }
        stage('Deploying') {
            steps {
                sh "chmod +x -R ${env.WORKSPACE}"
                sh 'echo "Deploying"'
                withCredentials([usernamePassword(credentialsId: 'esp52_ssh', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    echo "$remote.host"

                    script {
                        remote.user = USERNAME
                        remote.password = PASSWORD
                        remote.allowAnyHosts = true
                    }

                    echo "$remote.user"

                    /*
                    sshCommand remote: remote, command: 'docker stop esp52_kafkaconsumer5 || echo "Do not have that image"'
                    sshCommand remote: remote, command: 'docker rm esp52_kafkaconsumer5 || echo "Do not have that image"'
                    sshCommand remote: remote, command: 'docker rmi 192.168.160.48:5000/es-project/kafkaconsumer5 || echo "Do not have that image"'
                    sshCommand remote: remote, command: 'docker pull 192.168.160.48:5000/es-project/kafkaconsumer5'
                    sshCommand remote: remote, command: 'docker create -p 52025:52025 --name esp52_kafkaconsumer5 192.168.160.48:5000/es-project/kafkaconsumer5'
                    sshCommand remote: remote, command: 'docker start esp52_kafkaconsumer5'

                    sshCommand remote: remote, command: "docker stop esp52_projectbackend5 || echo 'Do not have that image'"
                    sshCommand remote: remote, command: "docker rm esp52_projectbackend5 || echo 'Do not have that image'"
                    sshCommand remote: remote, command: 'docker rmi 192.168.160.48:5000/es-project/projectbackend5'
                    sshCommand remote: remote, command: 'docker pull 192.168.160.48:5000/es-project/projectbackend5'
                    sshCommand remote: remote, command: 'docker create -p 52026:52026 --name esp52_projectbackend5 192.168.160.48:5000/es-project/projectbackend5'
                    sshCommand remote: remote, command: 'docker start esp52_projectbackend5'
                    */
                    
                    //sshCommand remote: remote, command: "docker stop esp52_alarmsservice6 || echo 'Do not have that image'"
                    //sshCommand remote: remote, command: "docker rm esp52_alarmsservice6 || echo 'Do not have that image'"
                    //sshCommand remote: remote, command: 'docker rmi 192.168.160.48:5000/es-project/alarmsservice6'
                    sshCommand remote: remote, command: 'docker pull 192.168.160.48:5000/es-project/alarmsservice6'
                    sshCommand remote: remote, command: 'docker create -p 52026:52026 --name esp52_alarmsservice6 192.168.160.48:5000/es-project/alarmsservice6'
                    sshCommand remote: remote, command: 'docker start esp52_alarmsservice6'

                    //sshCommand remote: remote, command: "docker stop esp52_externalapi5 || echo 'Do not have that image'"
                    //sshCommand remote: remote, command: "docker rm esp52_externalapi5 || echo 'Do not have that image'"
                    //sshCommand remote: remote, command: 'docker rmi 192.168.160.48:5000/es-project/externalapi5'
                    sshCommand remote: remote, command: 'docker pull 192.168.160.48:5000/es-project/externalapi5'
                    sshCommand remote: remote, command: 'docker create -p 52026:52026 --name esp52_externalapi5 192.168.160.48:5000/es-project/externalapi5'
                    sshCommand remote: remote, command: 'docker start esp52_externalapi5'

                    //sshCommand remote: remote, command: "docker stop esp52_managementservice5 || echo 'Do not have that image'"
                    //sshCommand remote: remote, command: "docker rm esp52_managementservice5 || echo 'Do not have that image'"
                    //sshCommand remote: remote, command: 'docker rmi 192.168.160.48:5000/es-project/managementservice5'
                    sshCommand remote: remote, command: 'docker pull 192.168.160.48:5000/es-project/managementservice5'
                    sshCommand remote: remote, command: 'docker create -p 52026:52026 --name esp52_managementservice5 192.168.160.48:5000/es-project/managementservice5'
                    sshCommand remote: remote, command: 'docker start esp52_managementservice5'

                    //sshCommand remote: remote, command: "docker stop esp52_parkinglotsservice5 || echo 'Do not have that image'"
                    //sshCommand remote: remote, command: "docker rm esp52_parkinglotsservice5 || echo 'Do not have that image'"
                    //sshCommand remote: remote, command: 'docker rmi 192.168.160.48:5000/es-project/parkinglotsservice5'
                    sshCommand remote: remote, command: 'docker pull 192.168.160.48:5000/es-project/parkinglotsservice5'
                    sshCommand remote: remote, command: 'docker create -p 52026:52026 --name esp52_parkinglotsservice5 192.168.160.48:5000/es-project/parkinglotsservice5'
                    sshCommand remote: remote, command: 'docker start esp52_parkinglotsservice5'

                    //sshCommand remote: remote, command: "docker stop esp52_staticinfo5 || echo 'Do not have that image'"
                    //sshCommand remote: remote, command: "docker rm esp52_staticinfo5 || echo 'Do not have that image'"
                    //sshCommand remote: remote, command: 'docker rmi 192.168.160.48:5000/es-project/staticinfo5'
                    sshCommand remote: remote, command: 'docker pull 192.168.160.48:5000/es-project/staticinfo5'
                    sshCommand remote: remote, command: 'docker create -p 52026:52026 --name esp52_staticinfo5 192.168.160.48:5000/es-project/staticinfo5'
                    sshCommand remote: remote, command: 'docker start esp52_staticinfo5'

                    //sshCommand remote: remote, command: "docker stop esp52_vehiclesservice5 || echo 'Do not have that image'"
                    //sshCommand remote: remote, command: "docker rm esp52_vehiclesservice5 || echo 'Do not have that image'"
                    //sshCommand remote: remote, command: 'docker rmi 192.168.160.48:5000/es-project/vehiclesservice5'
                    sshCommand remote: remote, command: 'docker pull 192.168.160.48:5000/es-project/vehiclesservice5'
                    sshCommand remote: remote, command: 'docker create -p 52026:52026 --name esp52_vehiclesservice5 192.168.160.48:5000/es-project/vehiclesservice5'
                    sshCommand remote: remote, command: 'docker start esp52_vehiclesservice5'

                    /*sshCommand remote: remote, command: "/bin/bash -c 'docker-compose down --rmi all || true'"
                    sshCommand remote: remote, command: "/bin/bash -c 'rm docker-compose.yml || true'"
                    sshPut remote: remote, from: 'docker-compose.yml', into: './', override: true
                    sshCommand remote: remote, command: "/bin/bash -c 'docker-compose up -d '"*/

                    //sh 'docker-compose down --rmi all'
                    //sh 'rm docker-compose.yml'
                    //sh 'docker-compose up -d --build server consumer'

                    //sshCommand remote: remote, command: 'docker-compose up -d'
                }
            }
        }
    }
    post {
        always {
            echo "Pipeline execution ended: "
        }
        success {
            echo "Success"
        }
        failure {
            echo "Failed"
        }
    }
}
