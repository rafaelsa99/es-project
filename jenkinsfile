def remote = [:]
remote.host = '192.168.160.87'
remote.name = 'playground'

pipeline {
    agent any

    tools {
        maven 'maven36'
        jdk 'jdk11'
    }

    environment {
        dockerImage3 = ''
        dockerImage4 = ''
        dockerImage5 = ''
        dockerImage6 = ''
        dockerImage7 = ''
        dockerImage8 = ''
        dockerImage9 = ''
    }

    stages {
        stage('Cloning repository') {
            steps {
                git(
                    branch: 'main',
                    url: 'https://github.com/rafaelsa99/es-project'

                )
                sh "chmod +x -R ${env.WORKSPACE}"
            }
        }

        /*stage('Testing Cucumber / MockMVC on Parking Lots Service') {
            steps {
                dir('ParkingLotsService') {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        sh "chmod +x -R ${env.WORKSPACE}"
                        sh 'echo "Tests on ParkingLotsService"'
                        sh './mvnw test'
                    }
                }
            }
        }*/

        /*stage('Compilation') {
            steps {
                parallel(
                    alarmsService: {
                        dir('AlarmsService') {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                sh 'echo "Clean install on AlarmsService"'
                                sh './mvnw clean install -DskipTests'
                            }
                        }
                    },
                    externalAPI: {
                        dir('externalAPI') {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                sh 'echo "Clean install on externalAPI"'
                                sh './mvnw clean install -DskipTests'
                            }
                        }
                    },
                    managementService: {
                        dir('ManagementService') {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                sh 'echo "Clean install on ManagementService"'
                                sh './mvnw clean install -DskipTests'
                            }
                        }
                    },
                    parkingLotsService: {
                        dir('ParkingLotsService') {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                sh 'echo "Clean install on ParkingLotsService"'
                                sh './mvnw clean install -DskipTests'
                            }
                        }
                    },
                    staticInfo: {
                        dir('StaticInfo') {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                sh 'echo "Clean install on StaticInfo"'
                                sh './mvnw clean install -DskipTests'
                            }
                        }
                    },
                    vehiclesService: {
                        dir('VehiclesService') {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                sh 'echo "Clean install on VehiclesService"'
                                sh './mvnw clean install -DskipTests'
                            }
                        }
                    }
                )
            }
        }
        stage('Deploying Artifact') {
            steps {
                parallel(
                    alarmsService: {
                        dir('AlarmsService') {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                echo 'Deploying Artifact on AlarmsService'
                                sh './mvnw deploy -DskipTests -f pom.xml -s ../settings.xml'
                            }
                        }
                    },
                    externalAPI: {
                        dir('externalAPI') {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                echo 'Deploying Artifact on externalAPI'
                                sh './mvnw deploy -DskipTests -f pom.xml -s ../settings.xml'
                            }
                        }
                    },
                    managementService: {
                        dir('ManagementService') {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                echo 'Deploying Artifact on ManagementService'
                                sh './mvnw deploy -DskipTests -f pom.xml -s ../settings.xml'
                            }
                        }
                    },
                    parkingLotsService: {
                        dir('ParkingLotsService') {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                echo 'Deploying Artifact on ParkingLotsService'
                                sh './mvnw deploy -DskipTests -f pom.xml -s ../settings.xml'
                            }
                        }
                    },
                    staticInfo: {
                        dir('StaticInfo') {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                echo 'Deploying Artifact on StaticInfo'
                                sh './mvnw deploy -DskipTests -f pom.xml -s ../settings.xml'
                            }
                        }
                    },
                    vehiclesService: {
                        dir('VehiclesService') {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                echo 'Deploying Artifact on VehiclesService'
                                sh './mvnw deploy -DskipTests -f pom.xml -s ../settings.xml'
                            }
                        }
                    }
                )
            }
        }
        stage('Create Docker Image') {
            steps {
                parallel(
                    alarmsService: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh 'echo "Creating Docker Image on AlarmsService"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage3 = docker.build('es-project/alarmsservice9', 'AlarmsService')
                                }
                            }
                        }
                    },
                    externalAPI: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh 'echo "Creating Docker Image on externalAPI"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage4 = docker.build('es-project/externalapi9', 'externalAPI')
                                }
                            }
                        }
                    },
                    managementService: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh 'echo "Creating Docker Image on managementService"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage5 = docker.build('es-project/managementservice9', 'ManagementService')
                                }
                            }
                        }
                    },
                    parkingLotsService: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh 'echo "Creating Docker Image on ParkingLotsService"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage6 = docker.build('es-project/parkinglotsservice9', 'ParkingLotsService')
                                }
                            }
                        }
                    },
                    staticInfo: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh 'echo "Creating Docker Image on StaticInfo"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage7 = docker.build('es-project/staticinfo9', 'StaticInfo')
                                }
                            }
                        }
                    },
                    vehiclesService: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh 'echo "Creating Docker Image on VehiclesService"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage8 = docker.build('es-project/vehiclesservice8', 'VehiclesService')
                                }
                            }
                        }
                    },
                    projectfrontend: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh 'echo "Creating Docker Image on VehiclesService"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage9 = docker.build('es-project/projectfrontend9', 'projectfrontend')
                                }
                            }
                        }
                    }
                )
            }
        }
        stage('Pushing Docker Image') {
            steps {
                parallel(
                    alarmsService: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh 'echo "Pushing Docker Image on AlarmsService"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage3.push()
                                    dockerImage3.push('latest')
                                }
                            }
                        }
                    },
                    externalAPI: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh 'echo "Pushing Docker Image on externalAPI"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage4.push()
                                    dockerImage4.push('latest')
                                }
                            }
                        }
                    },
                    managementService: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh 'echo "Pushing Docker Image on managementService"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage5.push()
                                    dockerImage5.push('latest')
                                }
                            }
                        }
                    },
                    parkingLotsService: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh 'echo "Pushing Docker Image on ParkingLotsService"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage6.push()
                                    dockerImage6.push('latest')
                                }
                            }
                        }
                    },
                    staticInfo: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh 'echo "Pushing Docker Image on StaticInfo"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage7.push()
                                    dockerImage7.push('latest')
                                }
                            }
                        }
                    },
                    vehiclesService: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh 'echo "Pushing Docker Image on VehiclesService"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage8.push()
                                    dockerImage8.push('latest')
                                }
                            }
                        }
                    },
                    projectfrontend: {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh 'echo "Pushing Docker Image on projectfrontend"'
                            script {
                                docker.withRegistry('http://192.168.160.48:5000') {
                                    dockerImage9.push()
                                    dockerImage9.push('latest')
                                }
                            }
                        }
                    }
                )
            }
        }*/
        /*stage('Copying Files') {
            steps {
                sshagent (credentials: ['esp52_playground_ssh']) {
                    sh "chmod +x -R ${env.WORKSPACE}"
                    sh 'echo "Copying Files"'
                    sh 'scp -r ./logstash esp52@192.168.160.87:./'
                    sh 'scp docker-compose.yml esp52@192.168.160.87:./'
                    //sh 'esp52@192.168.160.87 docker compose up --build'
                    sh 'ssh -o StrictHostKeyChecking=no esp52@192.168.160.87 docker-compose up'
                }
            }
        }*/

        stage('Deploying on VM') {
            steps {
                sh 'echo "Deploying"'
                withCredentials([usernamePassword(credentialsId: 'esp52_ssh', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    echo "$remote.host"

                    script {
                        remote.user = USERNAME
                        remote.password = PASSWORD
                        remote.allowAnyHosts = true
                    }

                    echo "$remote.user"

                    /*
                    sshCommand remote: remote, command: "docker stop esp52_alarmsservice9 || echo 'Do not have that image'"
                    sshCommand remote: remote, command: "docker rm esp52_alarmsservice9 || echo 'Do not have that image'"
                    sshCommand remote: remote, command: 'docker rmi 192.168.160.48:5000/es-project/alarmsservice9 || echo "Do not have that image"'
                    sshCommand remote: remote, command: 'docker pull 192.168.160.48:5000/es-project/alarmsservice9'
                    //sshCommand remote: remote, command: 'docker create -p 52040:52040 --name esp52_alarmsservice9 192.168.160.48:5000/es-project/alarmsservice9'
                    //sshCommand remote: remote, command: 'docker start esp52_alarmsservice9'

                    sshCommand remote: remote, command: "docker stop esp52_externalapi9 || echo 'Do not have that image'"
                    sshCommand remote: remote, command: "docker rm esp52_externalapi9 || echo 'Do not have that image'"
                    sshCommand remote: remote, command: 'docker rmi 192.168.160.48:5000/es-project/externalapi9 || echo "Do not have that image"'
                    sshCommand remote: remote, command: 'docker pull 192.168.160.48:5000/es-project/externalapi9'
                    //sshCommand remote: remote, command: 'docker create -p 52041:52041 --name esp52_externalapi9 192.168.160.48:5000/es-project/externalapi9'
                    //sshCommand remote: remote, command: 'docker start esp52_externalapi9'

                    sshCommand remote: remote, command: "docker stop esp52_managementservice9 || echo 'Do not have that image'"
                    sshCommand remote: remote, command: "docker rm esp52_managementservice9 || echo 'Do not have that image'"
                    sshCommand remote: remote, command: 'docker rmi 192.168.160.48:5000/es-project/managementservice9 || echo "Do not have that image"'
                    sshCommand remote: remote, command: 'docker pull 192.168.160.48:5000/es-project/managementservice9'
                    //sshCommand remote: remote, command: 'docker create -p 52042:52042 --name esp52_managementservice9 192.168.160.48:5000/es-project/managementservice9'
                    //sshCommand remote: remote, command: 'docker start esp52_managementservice9'

                    sshCommand remote: remote, command: "docker stop esp52_parkinglotsservice9 || echo 'Do not have that image'"
                    sshCommand remote: remote, command: "docker rm esp52_parkinglotsservice9 || echo 'Do not have that image'"
                    sshCommand remote: remote, command: 'docker rmi 192.168.160.48:5000/es-project/parkinglotsservice9 || echo "Do not have that image"'
                    sshCommand remote: remote, command: 'docker pull 192.168.160.48:5000/es-project/parkinglotsservice9'
                    //sshCommand remote: remote, command: 'docker create -p 52043:52043 --name esp52_parkinglotsservice9 192.168.160.48:5000/es-project/parkinglotsservice9'
                    //sshCommand remote: remote, command: 'docker start esp52_parkinglotsservice9'

                    sshCommand remote: remote, command: "docker stop esp52_staticinfo9 || echo 'Do not have that image'"
                    sshCommand remote: remote, command: "docker rm esp52_staticinfo9 || echo 'Do not have that image'"
                    sshCommand remote: remote, command: 'docker rmi 192.168.160.48:5000/es-project/staticinfo9 || echo "Do not have that image"'
                    sshCommand remote: remote, command: 'docker pull 192.168.160.48:5000/es-project/staticinfo9'
                    //sshCommand remote: remote, command: 'docker create -p 52044:52044 --name esp52_staticinfo9 192.168.160.48:5000/es-project/staticinfo9'
                    //sshCommand remote: remote, command: 'docker start esp52_staticinfo9'

                    sshCommand remote: remote, command: "docker stop esp52_vehiclesservice8 || echo 'Do not have that image'"
                    sshCommand remote: remote, command: "docker rm esp52_vehiclesservice8 || echo 'Do not have that image'"
                    sshCommand remote: remote, command: 'docker rmi 192.168.160.48:5000/es-project/vehiclesservice8 || echo "Do not have that image"'
                    sshCommand remote: remote, command: 'docker pull 192.168.160.48:5000/es-project/vehiclesservice8'
                    //sshCommand remote: remote, command: 'docker create -p 52038:52038 --name esp52_vehiclesservice8 192.168.160.48:5000/es-project/vehiclesservice8'
                    //sshCommand remote: remote, command: 'docker start esp52_vehiclesservice8'

                    sshCommand remote: remote, command: "docker stop esp52_projectfrontend9 || echo 'Do not have that image'"
                    sshCommand remote: remote, command: "docker rm esp52_projectfrontend9 || echo 'Do not have that image'"
                    sshCommand remote: remote, command: 'docker rmi 192.168.160.48:5000/es-project/projectfrontend9 || echo "Do not have that image"'
                    sshCommand remote: remote, command: 'docker pull 192.168.160.48:5000/es-project/projectfrontend9'
                    //sshCommand remote: remote, command: 'docker create -p 52045:52045 --name esp52_projectfrontend9 192.168.160.48:5000/es-project/projectfrontend9'
                    //sshCommand remote: remote, command: 'docker start esp52_projectfrontend9'
                    */

                    sshPut(from: './logstash/', remote: remote, into: '/home/esp52/')
                    sshPut(from: 'docker-compose.yml', remote: remote, into: '/home/esp52/')
                    sshCommand remote: remote, command: '/bin/bash -c \'docker-compose pull\''
                    sshCommand remote: remote, command: '/bin/bash -c \'docker-compose up -d\''

                    //sshCommand remote: remote, command: 'scp ./docker-compose.yml ./'
                    //sshCommand remote: remote, command: 'scp -r /logstash ./'
		            //sshCommand remote: remote, command: 'scp docker-compose.yml ./'
                    //sshCommand remote: remote, command: 'docker-compose up'

                    //sshCommand remote: remote, command: "docker-compose down --rmi all || echo 'Do not have that image'"
                    //sshCommand remote: remote, command: "rm docker-compose.yml || echo 'Do not have that image'"
                    //sshCommand remote: remote, command: 'scp docker-compose.yml ./'
                    //sshCommand remote: remote, command: 'docker-compose up -d'

                    //sshCommand remote: remote, command: 'docker compose up --build'
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline execution ended: '
        }
        success {
            echo 'Success'
        }
        failure {
            echo 'Failed'
        }
    }
}
